{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alfalak\\\\Desktop\\\\React\\\\12-finished-food-app\\\\src\\\\components\\\\Cart\\\\Checkout.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from 'react';\nimport classes from './Checkout.module.css';\n//i uesed ref because i want to check validity whrn form submitted not with every key \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isEmpty = value => value.trim() === '';\nconst isFiveChar = value => value.trim().length === 5;\nconst Checkout = props => {\n  _s();\n  const [formInputValidity, setFormInputValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true\n  });\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postalCodeInputRef = useRef();\n  const cityInputRef = useRef();\n  const confirmHandler = event => {\n    event.preventDefault();\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostalCode = postalCodeInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n    const enteredNameIsValid = !isEmpty(enteredName); //if entered name is not empty so its valid\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\n    const enteredCityIsValid = !isEmpty(enteredCity);\n    const enteredPostlCodeIsValid = isFiveChar(enteredPostalCode);\n    setFormInputValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      city: enteredCityIsValid,\n      postalCode: enteredPostlCodeIsValid\n    });\n    const formIsValid = enteredNameIsValid && enteredStreetIsValid && enteredCityIsValid && enteredPostlCodeIsValid;\n    if (!formIsValid) {\n      return;\n    } else {\n      props.onConforim({\n        name: enteredName,\n        street: enteredStreet,\n        city: enteredCity,\n        postalCode: enteredPostalCode\n      }); //with that we pass the data from the checkout comp\n    }\n  };\n\n  const nameControlClasses = `${classes.control} ${formInputValidity.name ? '' : classes.invalid}`;\n  const streetControlClasses = `${classes.control} ${formInputValidity.street ? '' : classes.invalid}`;\n  const postalCodeControlClasses = `${classes.control} ${formInputValidity.postalCode ? '' : classes.invalid}`;\n  const cityControlClasses = `${classes.control} ${formInputValidity.city ? '' : classes.invalid}`;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), !formInputValidity.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"please enter a valid name \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: streetControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        ref: streetInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), !formInputValidity.street && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"please enter a valid street \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: postalCodeControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postal\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postal\",\n        ref: postalCodeInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), !formInputValidity.postalCode && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"please enter a valid code \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 43\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cityControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        ref: cityInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), !formInputValidity.city && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"please enter a valid city \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(Checkout, \"hFh90RAqHGlelzhSq93NsaVxGW0=\");\n_c = Checkout;\nexport default Checkout;\nvar _c;\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"names":["useRef","useState","classes","isEmpty","value","trim","isFiveChar","length","Checkout","props","formInputValidity","setFormInputValidity","name","street","city","postalCode","nameInputRef","streetInputRef","postalCodeInputRef","cityInputRef","confirmHandler","event","preventDefault","enteredName","current","enteredStreet","enteredPostalCode","enteredCity","enteredNameIsValid","enteredStreetIsValid","enteredCityIsValid","enteredPostlCodeIsValid","formIsValid","onConforim","nameControlClasses","control","invalid","streetControlClasses","postalCodeControlClasses","cityControlClasses","form","actions","onCancel","submit"],"sources":["C:/Users/alfalak/Desktop/React/12-finished-food-app/src/components/Cart/Checkout.js"],"sourcesContent":["import { useRef, useState } from 'react';\r\nimport classes from './Checkout.module.css';\r\n//i uesed ref because i want to check validity whrn form submitted not with every key \r\n\r\nconst isEmpty = value => value.trim() === '';\r\nconst isFiveChar = value => value.trim().length === 5;\r\n\r\n\r\n\r\n\r\nconst Checkout = (props) => {\r\n    const [formInputValidity, setFormInputValidity] = useState({\r\n        name: true,\r\n        street: true,\r\n        city: true,\r\n        postalCode: true\r\n    });\r\n\r\n    const nameInputRef = useRef();\r\n    const streetInputRef = useRef();\r\n    const postalCodeInputRef = useRef();\r\n    const cityInputRef = useRef();\r\n\r\n  const confirmHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredName = nameInputRef.current.value;\r\n    const enteredStreet = streetInputRef.current.value;\r\n    const enteredPostalCode = postalCodeInputRef.current.value;\r\n    const enteredCity = cityInputRef.current.value;\r\n\r\n    const enteredNameIsValid = !isEmpty(enteredName);//if entered name is not empty so its valid\r\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\r\n    const enteredCityIsValid = !isEmpty(enteredCity);\r\n    const enteredPostlCodeIsValid = isFiveChar(enteredPostalCode);\r\n\r\n    setFormInputValidity({\r\n        name:enteredNameIsValid,\r\n        street:enteredStreetIsValid,\r\n        city: enteredCityIsValid,\r\n        postalCode:enteredPostlCodeIsValid\r\n    });\r\n\r\n\r\n    const formIsValid = \r\n    enteredNameIsValid &&\r\n    enteredStreetIsValid &&\r\n    enteredCityIsValid &&\r\n    enteredPostlCodeIsValid ;\r\n\r\n    if (!formIsValid){\r\n        return;\r\n    }else{\r\n        props.onConforim({\r\n            name:enteredName,\r\n            street:enteredStreet,\r\n            city: enteredCity,\r\n            postalCode:enteredPostalCode\r\n        });//with that we pass the data from the checkout comp\r\n\r\n    }\r\n\r\n};\r\n        const nameControlClasses = `${classes.control} ${\r\n            formInputValidity.name ? '': classes.invalid}`;\r\n        const streetControlClasses = `${classes.control} ${\r\n                formInputValidity.street ? '': classes.invalid}`;\r\n        const postalCodeControlClasses = `${classes.control} ${\r\n                    formInputValidity.postalCode ? '': classes.invalid}`;\r\n        const cityControlClasses = `${classes.control} ${\r\n                        formInputValidity.city ? '': classes.invalid}`;\r\n \r\n\r\n  return (\r\n    <form className={classes.form} onSubmit={confirmHandler}>\r\n      <div className={nameControlClasses}>\r\n        <label htmlFor='name'>Your Name</label>\r\n        <input type='text' id='name'  ref={nameInputRef}/>\r\n        {!formInputValidity.name && <p>please enter a valid name </p>}\r\n      </div>\r\n      <div className={streetControlClasses}>\r\n        <label htmlFor='street'>Street</label>\r\n        <input type='text' id='street' ref={streetInputRef} />\r\n        {!formInputValidity.street && <p>please enter a valid street </p>}\r\n\r\n      </div>\r\n      <div className={postalCodeControlClasses}>\r\n        <label htmlFor='postal'>Postal Code</label>\r\n        <input type='text' id='postal' ref={postalCodeInputRef} />\r\n        {!formInputValidity.postalCode && <p>please enter a valid code </p>}\r\n\r\n      </div>\r\n      <div className={cityControlClasses}>\r\n        <label htmlFor='city'>City</label>\r\n        <input type='text' id='city'  ref={cityInputRef}/>\r\n        {!formInputValidity.city && <p>please enter a valid city </p>}\r\n\r\n      </div>\r\n      <div className={classes.actions}>\r\n        <button type='button' onClick={props.onCancel}>\r\n          Cancel\r\n        </button>\r\n        <button className={classes.submit}>Confirm</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Checkout;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}